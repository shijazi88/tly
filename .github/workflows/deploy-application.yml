name: Deploy application
on:
  push:
    branches:
      - master

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: Compile css and Javascript
        run: |
          npm install


      - name: Configure php 8.0
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.0
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: Install Composer Dependencies
        run: composer install --no-dev --no-interaction --prefer-dist

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: export deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment-config.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\n'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"


  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"

            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/storage
            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}
            mkdir -p ${{ matrix.server.path }}/storage/cache/{data}
            chmod -R 0777 ${{ matrix.server.path }}/storage

  run-before-hooks:
    name: "${{ matrix.server.name }}: Before hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
            GITHUB_SHA: ${{ github.sha }}
            RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
            ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
            STORAGE_PATH: ${{ matrix.server.path }}/storage
            BASE_PATH: ${{ matrix.server.path }}
        with:
            host: ${{ matrix.server.ip }}
            username: ${{ matrix.server.username }}
            password: ${{ matrix.server.password }}
            port: ${{ matrix.server.port }}
            envs: GITHUB_SHA, RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
            script: |
              ${{  matrix.server.beforeHooks }}

  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server,run-before-hooks ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA, RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,LARAVEL_ENV
          script: |
           printf "%s" "$LARAVEL_ENV" > "${BASE_PATH}/.env"
           ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
           ln -s -f $STORAGE_PATH $RELEASE_PATH
           ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
           service php8.0-fpm reload



  run-after-hooks:
    name: "${{ matrix.server.name }}: After hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server,activate-release ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run before hooks
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          password: ${{ matrix.server.password }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA, RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH
          script: |
            ${{  matrix.server.afterhooks }}
            cd /var/www/html/current && php artisan optimize
            cd ../


  clean-up:
      name: "${{ matrix.server.name }}: Clean up"
      runs-on: ubuntu-latest
      needs: [ create-deployment-artifacts, prepare-release-on-server,activate-release,run-after-hooks ]
      strategy:
        matrix:
          server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
      steps:
        - name: Run before hooks
          uses: appleboy/ssh-action@master
          env:
            RELEASE_PATH: ${{ matrix.server.path }}/releases
            ARTIFACT_PATH: ${{ matrix.server.path }}/artifacts
          with:
            host: ${{ matrix.server.ip }}
            username: ${{ matrix.server.username }}
            password: ${{ matrix.server.password }}
            port: ${{ matrix.server.port }}
            envs: RELEASE_PATH, ARTIFACT_PATH
            script: |
              cd $RELEASE_PATH && ls -t -1 | tail -n +3 | xargs rm -rf
              cd $ARTIFACT_PATH && ls -t -1 | tail -n +3 | xargs rm -rf
